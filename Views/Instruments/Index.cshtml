@using Music_Store_Warehouse_App.Data
@model PaginatedList<Music_Store_Warehouse_App.Models.Instrument>

@{
    ViewData["Title"] = "Asortyment";
}

<h1>Asortyment</h1>

<p>
    <a asp-action="Create" class="btn btn-sm btn-success">Dodaj</a>
</p>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <label>Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" /></label>
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>

            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Name</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["PriceSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Price</a>
            </th>
            <th>
                <!-- Dodajemy [0] ponieaż teraz model to PaginatedList która nie ma właściwości Description tak jak wcześniejszy
                    model instrument.
                */ -->
                @Html.DisplayNameFor(model => model[0].Description) 
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].EAN)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].SKU)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Supplier)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Category)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EAN)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SKU)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Supplier.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Category.Name)
            </td>
            <td style>
                    <a asp-action="Edit" asp-route-id="@item.InstrumentId" class="btn btn-sm btn-primary">Edytuj</a> |
                    <a asp-action="Details" asp-route-id="@item.InstrumentId" class="btn btn-sm btn-info">Szczegóły</a> |
                    <a asp-action="Delete" asp-route-id="@item.InstrumentId" class="btn btn-sm btn-danger">Usuń</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
