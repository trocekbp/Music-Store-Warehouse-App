@using Music_Store_Warehouse_App.Data
@model PaginatedList<Music_Store_Warehouse_App.Models.Instrument>

@{
    ViewData["Title"] = "Instrumenty";
}

<h1>Instrumenty dostępne u dystrybutorów</h1>

<p>
    <p>(Dodaj instrumenty do sieci)</p>
    <a asp-action="Create" class="btn btn-sm btn-success">Dodaj</a>
</p>

<form asp-action="Index" method="get" class="form-inline mb-3">
    <p class="mb-0">
        <!-- Pole wyszukiwania -->
        <label class="mr-2">
            Szukana nazwa:
            <input type="text"
                   name="searchString"
                   value="@(ViewData["CurrentFilter"] ?? "")"
                   class="form-control form-control-sm ml-1"
                   style="width: 200px;" />
        </label>

        <!-- Dropdown kategorii -->
        <label class="ml-3 mr-2">
            kategoria:
            <select name="categoryId"
                    id="categoryId"
                    class="form-control form-control-sm ml-1"
                    style="width: 180px;">
                <option value="">Wszystkie</option>
                @foreach (SelectListItem cat in (SelectList)ViewData["CategoryList"])
                {
                    <option value="@cat.Value" selected="@(cat.Selected ? "selected" : null)">
                        @cat.Text
                    </option>
                }
            </select>
        </label>
        <!-- Dropdown dostawców -->
        <label class="ml-3 mr-2">
            dostawca:
            <select name="supplierId"
                    id="supplierId"
                    class="form-control form-control-sm ml-1"
                    style="width: 180px;">
                <option value="">Wszyscy</option>
                @foreach (SelectListItem sup in (SelectList)ViewData["SupplierList"])
                {
                    <option value="@sup.Value" selected="@(sup.Selected ? "selected" : null)">
                        @sup.Text
                    </option>
                }
            </select>
        </label>
        <!-- Przycisk wyszukiwania i link do pełnej listy -->
        <button type="submit" class="btn btn-default">Szukaj</button>   |
        <a asp-action="Index">Wyczyść</a>
    </p>
</form>

<table class="table">
    <thead>
        <tr>

            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Name</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["PriceSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Price</a>
            </th>
            <th>
                <!-- Dodajemy [0] ponieaż teraz model to PaginatedList która nie ma właściwości Description tak jak wcześniejszy
                    model instrument.
                */ -->
                @Html.DisplayNameFor(model => model[0].Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].EAN)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].SKU)
            </th>
     @*        Od wejśca rozszerzonej wersji ilość jest wyświetlana w controlerze magazyny - InstrumentInventoriesControler
            <th>
                @Html.DisplayNameFor(model => model[0].Inventory.Quantity)
            </th> *@
            <th>
                @Html.DisplayNameFor(model => model[0].Supplier)
            </th>
            <th>
                @Html.DisplayNameFor(model => model[0].Category)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EAN)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SKU)
                </td>
@*                 <td>
                    @Html.DisplayFor(modelItem => item.Inventory.Quantity)
                </td> *@
                <td>
                    @Html.DisplayFor(modelItem => item.Supplier.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category.Name)
                </td>
                <td style>
                    @* Wyłączone po stronie użytkownika, będzie aktywne gdy pojawi się logowanie admina*@
                    @* <a asp-action="Edit" asp-route-id="@item.InstrumentId" class="btn btn-sm btn-primary">Edytuj</a> | *@
                    <a asp-action="Details" asp-route-id="@item.InstrumentId" class="btn btn-sm btn-info">Szczegóły</a>

                    <a asp-controller="Documents" asp-action="Create" asp-route-supplierId="@item.SupplierId" asp-route-selectedInstrumentIds="@item.InstrumentId" class="btn btn-sm btn-outline-success">Przyjmij do magazynu</a>
                    @* <a asp-action="Delete" asp-route-id="@item.InstrumentId" class="btn btn-sm btn-danger">Usuń</a> *@
                </td>
            </tr>
        }
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
